; Listing generated by Microsoft (R) Optimizing Compiler Version 19.29.30153.0 

	TITLE	C:\Users\admin\Documents\GitHub\ShellcodeLab\Shellcode\Release\shellcode.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	___local_stdio_printf_options
PUBLIC	__vfprintf_l
PUBLIC	_fprintf
PUBLIC	_printf
PUBLIC	?shellcode@@YAHXZ				; shellcode
PUBLIC	?shellcode_end@@YAXXZ				; shellcode_end
PUBLIC	_main
PUBLIC	?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage
PUBLIC	??_C@_02GMLFBBN@wb@				; `string'
PUBLIC	??_C@_0O@NFBNADIO@shellcode?4bin@		; `string'
PUBLIC	??_C@_0CC@CNIGJHCH@?$FLe?$FN?5Failed?5to?5open?5shellcode?4bi@ ; `string'
PUBLIC	??_C@_0CK@CNHACEFP@?$FLi?$FN?5Shellcode?5size?3?5?$CFlu?0?5locate@ ; `string'
PUBLIC	??_C@_0EF@MOLEIFGD@?$FLe?$FN?5Failed?5to?5dump?5shellcode?5to@ ; `string'
PUBLIC	??_C@_0CM@JHEGLBMC@?$FLi?$FN?5Shellcode?5saved?5to?5file?5she@ ; `string'
PUBLIC	??_C@_02JDPG@rb@				; `string'
PUBLIC	??_C@_0CN@KKANALMI@?$FLe?$FN?5Failed?5to?5allocate?5memory?5f@ ; `string'
PUBLIC	??_C@_0BO@KJKJAGIL@?$FLe?$FN?5Failed?5to?5read?5shellcode?6@ ; `string'
PUBLIC	??_C@_0CA@FFCIEFBF@?$FLi?$FN?5Loaded?5shellcode?5size?3?5?$CFld?6@ ; `string'
PUBLIC	??_C@_0CI@GCOJCDBI@?$FLe?$FN?5Failed?5to?5change?5memory?5pro@ ; `string'
PUBLIC	??_C@_0M@LDNOBAB@Result?3?5?$CFd?6@		; `string'
PUBLIC	??_C@_0CN@CMKKBCPN@Shellcode?5execution?5completed?5s@ ; `string'
EXTRN	__imp____acrt_iob_func:PROC
EXTRN	__imp__fclose:PROC
EXTRN	__imp__fopen:PROC
EXTRN	__imp__fread:PROC
EXTRN	__imp__fseek:PROC
EXTRN	__imp__ftell:PROC
EXTRN	__imp__fwrite:PROC
EXTRN	__imp____stdio_common_vfprintf:PROC
EXTRN	__imp__malloc:PROC
EXTRN	__imp__VirtualProtect@16:PROC
EXTRN	__imp__VirtualFree@12:PROC
;	COMDAT ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA
_BSS	SEGMENT
?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA DQ 01H DUP (?) ; `__local_stdio_printf_options'::`2'::_OptionsStorage
_BSS	ENDS
;	COMDAT ??_C@_0CN@CMKKBCPN@Shellcode?5execution?5completed?5s@
CONST	SEGMENT
??_C@_0CN@CMKKBCPN@Shellcode?5execution?5completed?5s@ DB 'Shellcode exec'
	DB	'ution completed successfully.', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@LDNOBAB@Result?3?5?$CFd?6@
CONST	SEGMENT
??_C@_0M@LDNOBAB@Result?3?5?$CFd?6@ DB 'Result: %d', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@GCOJCDBI@?$FLe?$FN?5Failed?5to?5change?5memory?5pro@
CONST	SEGMENT
??_C@_0CI@GCOJCDBI@?$FLe?$FN?5Failed?5to?5change?5memory?5pro@ DB '[e] Fa'
	DB	'iled to change memory protection', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@FFCIEFBF@?$FLi?$FN?5Loaded?5shellcode?5size?3?5?$CFld?6@
CONST	SEGMENT
??_C@_0CA@FFCIEFBF@?$FLi?$FN?5Loaded?5shellcode?5size?3?5?$CFld?6@ DB '[i'
	DB	'] Loaded shellcode size: %ld', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@KJKJAGIL@?$FLe?$FN?5Failed?5to?5read?5shellcode?6@
CONST	SEGMENT
??_C@_0BO@KJKJAGIL@?$FLe?$FN?5Failed?5to?5read?5shellcode?6@ DB '[e] Fail'
	DB	'ed to read shellcode', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CN@KKANALMI@?$FLe?$FN?5Failed?5to?5allocate?5memory?5f@
CONST	SEGMENT
??_C@_0CN@KKANALMI@?$FLe?$FN?5Failed?5to?5allocate?5memory?5f@ DB '[e] Fa'
	DB	'iled to allocate memory for shellcode', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_02JDPG@rb@
CONST	SEGMENT
??_C@_02JDPG@rb@ DB 'rb', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CM@JHEGLBMC@?$FLi?$FN?5Shellcode?5saved?5to?5file?5she@
CONST	SEGMENT
??_C@_0CM@JHEGLBMC@?$FLi?$FN?5Shellcode?5saved?5to?5file?5she@ DB '[i] Sh'
	DB	'ellcode saved to file shellcode.bin.', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EF@MOLEIFGD@?$FLe?$FN?5Failed?5to?5dump?5shellcode?5to@
CONST	SEGMENT
??_C@_0EF@MOLEIFGD@?$FLe?$FN?5Failed?5to?5dump?5shellcode?5to@ DB '[e] Fa'
	DB	'iled to dump shellcode to disk. Check your compiler settings.'
	DB	0aH, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0CK@CNHACEFP@?$FLi?$FN?5Shellcode?5size?3?5?$CFlu?0?5locate@
CONST	SEGMENT
??_C@_0CK@CNHACEFP@?$FLi?$FN?5Shellcode?5size?3?5?$CFlu?0?5locate@ DB '[i'
	DB	'] Shellcode size: %lu, located at 0x%p', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@CNIGJHCH@?$FLe?$FN?5Failed?5to?5open?5shellcode?4bi@
CONST	SEGMENT
??_C@_0CC@CNIGJHCH@?$FLe?$FN?5Failed?5to?5open?5shellcode?4bi@ DB '[e] Fa'
	DB	'iled to open shellcode.bin', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@NFBNADIO@shellcode?4bin@
CONST	SEGMENT
??_C@_0O@NFBNADIO@shellcode?4bin@ DB 'shellcode.bin', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_02GMLFBBN@wb@
CONST	SEGMENT
??_C@_02GMLFBBN@wb@ DB 'wb', 00H			; `string'
CONST	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	013H
	DW	016H
	DW	01cH
	DW	021H
	DW	024H
	DW	02aH
	DW	02fH
	DW	032H
	DW	035H
	DW	03aH
	DW	03dH
	DW	043H
	DW	048H
	DW	04bH
	DW	051H
	DW	056H
	DW	059H
	DW	05cH
	DW	061H
	DW	064H
	DW	06aH
	DW	06fH
	DW	072H
	DW	079H
	DW	07eH
	DW	081H
	DW	089H
	DW	08eH
	DW	091H
	DW	095H
	DW	09aH
	DW	09dH
	DW	0a0H
	DW	0a5H
	DW	0a8H
	DW	0abH
	DW	0b2H
	DW	0b5H
	DW	0b8H
	DW	0bdH
	DW	0c0H
	DW	0c3H
	DW	0c6H
	DW	0cbH
	DW	0ceH
	DW	0d1H
	DW	0d6H
	DW	0d9H
	DW	0dcH
	DW	0e1H
	DW	0e4H
	DW	0e7H
	DW	0ecH
	DW	0efH
	DW	0f2H
	DW	0f7H
	DW	0faH
	DW	0100H
	DW	0105H
	DW	0108H
	DW	010bH
	DW	0111H
	DW	0114H
	DW	0117H
	DW	011bH
	DW	011eH
	DW	0121H
	DW	0125H
	DW	0128H
	DW	012bH
	DW	012fH
	DW	0132H
	DW	0135H
	DW	0139H
	DW	013cH
	DW	013fH
	DW	0142H
	DW	014aH
	DW	014dH
	DW	0150H
	DW	0158H
	DW	015bH
	DW	015eH
	DW	0166H
	DW	0169H
	DW	016cH
	DW	0174H
	DW	0177H
	DW	017aH
	DW	0181H
voltbl	ENDS
; Function compile flags: /Ogsp
;	COMDAT _main
_TEXT	SEGMENT
_flOldProtect$ = -8					; size = 4
_fileSize$1$ = -4					; size = 4
_main	PROC						; COMDAT
; File C:\Users\admin\Documents\GitHub\ShellcodeLab\Shellcode\shellcode.cpp
; Line 67
	push	ebp
	mov	ebp, esp
	push	ecx
	push	ecx
	push	ebx
; Line 68
	push	OFFSET ??_C@_02GMLFBBN@wb@
	push	OFFSET ??_C@_0O@NFBNADIO@shellcode?4bin@
	call	DWORD PTR __imp__fopen
	mov	ebx, eax
	pop	ecx
	pop	ecx
; Line 69
	test	ebx, ebx
	jne	SHORT $LN2@main
; Line 70
	push	OFFSET ??_C@_0CC@CNIGJHCH@?$FLe?$FN?5Failed?5to?5open?5shellcode?4bi@
	push	2
	call	DWORD PTR __imp____acrt_iob_func
	pop	ecx
	push	eax
	call	_fprintf
	pop	ecx
; Line 71
	xor	eax, eax
	pop	ecx
	inc	eax
	jmp	$LN1@main
$LN2@main:
	push	esi
	push	edi
; Line 73
	mov	esi, OFFSET ?shellcode@@YAHXZ		; shellcode
	mov	edi, OFFSET ?shellcode_end@@YAXXZ	; shellcode_end
; Line 74
	push	esi
	sub	edi, esi
	push	edi
	push	OFFSET ??_C@_0CK@CNHACEFP@?$FLi?$FN?5Shellcode?5size?3?5?$CFlu?0?5locate@
	call	_printf
; Line 75
	push	ebx
	push	1
	push	edi
	push	esi
	mov	esi, DWORD PTR __imp__fwrite
	call	esi
; Line 77
	push	ebx
	push	1
	push	edi
	push	OFFSET ?shellcode@@YAHXZ		; shellcode
	call	esi
	add	esp, 44					; 0000002cH
	test	eax, eax
	jne	SHORT $LN3@main
; Line 78
	push	OFFSET ??_C@_0EF@MOLEIFGD@?$FLe?$FN?5Failed?5to?5dump?5shellcode?5to@
	push	2
	call	DWORD PTR __imp____acrt_iob_func
	pop	ecx
	push	eax
	call	_fprintf
; Line 79
	push	ebx
	call	DWORD PTR __imp__fclose
; Line 80
	jmp	$LN13@main
$LN3@main:
; Line 82
	push	ebx
	mov	ebx, DWORD PTR __imp__fclose
	call	ebx
; Line 83
	mov	DWORD PTR [esp], OFFSET ??_C@_0CM@JHEGLBMC@?$FLi?$FN?5Shellcode?5saved?5to?5file?5she@
	call	_printf
; Line 85
	mov	DWORD PTR [esp], OFFSET ??_C@_02JDPG@rb@
	push	OFFSET ??_C@_0O@NFBNADIO@shellcode?4bin@
	call	DWORD PTR __imp__fopen
	mov	edi, eax
	pop	ecx
	pop	ecx
; Line 86
	test	edi, edi
	jne	SHORT $LN4@main
; Line 87
	push	OFFSET ??_C@_0CC@CNIGJHCH@?$FLe?$FN?5Failed?5to?5open?5shellcode?4bi@
	push	2
	call	DWORD PTR __imp____acrt_iob_func
	pop	ecx
	push	eax
	call	_fprintf
	pop	ecx
; Line 88
	jmp	$LN12@main
$LN4@main:
; Line 90
	mov	esi, DWORD PTR __imp__fseek
	push	2
	push	0
	push	edi
	call	esi
; Line 91
	push	edi
	call	DWORD PTR __imp__ftell
; Line 92
	push	0
	push	0
	push	edi
	mov	DWORD PTR _fileSize$1$[ebp], eax
	call	esi
; Line 94
	push	DWORD PTR _fileSize$1$[ebp]
	call	DWORD PTR __imp__malloc
	mov	esi, eax
	add	esp, 32					; 00000020H
; Line 96
	test	esi, esi
	jne	SHORT $LN5@main
; Line 97
	push	OFFSET ??_C@_0CN@KKANALMI@?$FLe?$FN?5Failed?5to?5allocate?5memory?5f@
	push	2
	call	DWORD PTR __imp____acrt_iob_func
	pop	ecx
	push	eax
	call	_fprintf
; Line 98
	push	edi
	call	ebx
$LN13@main:
; Line 119
	add	esp, 12					; 0000000cH
	jmp	$LN11@main
$LN5@main:
; Line 101
	push	edi
	push	DWORD PTR _fileSize$1$[ebp]
	push	1
	push	esi
	call	DWORD PTR __imp__fread
	add	esp, 16					; 00000010H
	cmp	eax, DWORD PTR _fileSize$1$[ebp]
	je	SHORT $LN6@main
; Line 102
	push	OFFSET ??_C@_0BO@KJKJAGIL@?$FLe?$FN?5Failed?5to?5read?5shellcode?6@
	push	2
	call	DWORD PTR __imp____acrt_iob_func
	pop	ecx
	push	eax
	call	_fprintf
	pop	ecx
	pop	ecx
; Line 104
	push	32768					; 00008000H
	push	0
	push	esi
	call	DWORD PTR __imp__VirtualFree@12
; Line 108
	push	edi
	call	ebx
$LN12@main:
; Line 119
	pop	ecx
	jmp	SHORT $LN11@main
$LN6@main:
; Line 111
	push	edi
	call	ebx
; Line 112
	mov	ebx, DWORD PTR _fileSize$1$[ebp]
	push	ebx
	push	OFFSET ??_C@_0CA@FFCIEFBF@?$FLi?$FN?5Loaded?5shellcode?5size?3?5?$CFld?6@
	call	_printf
	add	esp, 12					; 0000000cH
; Line 116
	lea	eax, DWORD PTR _flOldProtect$[ebp]
	push	eax
	push	64					; 00000040H
	push	ebx
	push	esi
	call	DWORD PTR __imp__VirtualProtect@16
	test	eax, eax
	jne	SHORT $LN7@main
; Line 117
	push	OFFSET ??_C@_0CI@GCOJCDBI@?$FLe?$FN?5Failed?5to?5change?5memory?5pro@
	push	2
	call	DWORD PTR __imp____acrt_iob_func
	pop	ecx
	push	eax
	call	_fprintf
	pop	ecx
	pop	ecx
; Line 118
	push	32768					; 00008000H
	push	0
	push	esi
	call	DWORD PTR __imp__VirtualFree@12
$LN11@main:
; Line 119
	xor	eax, eax
	inc	eax
	jmp	SHORT $LN9@main
$LN7@main:
; Line 130
	call	esi
	push	eax
	push	OFFSET ??_C@_0M@LDNOBAB@Result?3?5?$CFd?6@
	call	_printf
; Line 132
	push	OFFSET ??_C@_0CN@CMKKBCPN@Shellcode?5execution?5completed?5s@
	call	_printf
	add	esp, 12					; 0000000cH
; Line 133
	xor	eax, eax
$LN9@main:
	pop	edi
	pop	esi
$LN1@main:
	pop	ebx
; Line 134
	leave
	ret	0
_main	ENDP
_TEXT	ENDS
; Function compile flags: /Ogsp
;	COMDAT ?shellcode_end@@YAXXZ
shcode	SEGMENT
?shellcode_end@@YAXXZ PROC				; shellcode_end, COMDAT
; File C:\Users\admin\Documents\GitHub\ShellcodeLab\Shellcode\shellcode.cpp
; Line 63
	ret	0
?shellcode_end@@YAXXZ ENDP				; shellcode_end
shcode	ENDS
; Function compile flags: /Ogsp
;	COMDAT ?shellcode@@YAHXZ
shcode	SEGMENT
_msg$ = -160						; size = 30
_k32$ = -128						; size = 60
_u32$ = -68						; size = 30
_curr_name$1$ = -36					; size = 4
_funcRVA$1$ = -36					; size = 4
tv1233 = -32						; size = 4
_handle$1$ = -32					; size = 4
$T1 = -28						; size = 4
$T2 = -28						; size = 4
tv1231 = -24						; size = 4
_base$1$ = -24						; size = 4
_funcRVA$1$ = -20					; size = 4
_curr_name$1$ = -20					; size = 4
_i$1$ = -16						; size = 4
tv1224 = -16						; size = 4
tv1218 = -12						; size = 4
_i$1$ = -12						; size = 4
_curr_module$1$ = -12					; size = 4
_c1$1$ = -8						; size = 4
tv1223 = -8						; size = 4
tv1219 = -8						; size = 4
_a$1$ = -4						; size = 4
tv1252 = -4						; size = 4
_a$1$ = -4						; size = 4
_i$ = -4						; size = 4
?shellcode@@YAHXZ PROC					; shellcode, COMDAT
; File C:\Users\admin\Documents\GitHub\ShellcodeLab\Shellcode\shellcode.cpp
; Line 18
	push	ebp
	mov	ebp, esp
	sub	esp, 160				; 000000a0H
	push	ebx
	push	esi
	push	edi
; Line 26
	push	107					; 0000006bH
	pop	ecx
	push	101					; 00000065H
	xor	esi, esi
	mov	DWORD PTR _i$[ebp], esi
	mov	eax, DWORD PTR _i$[ebp]
	pop	edx
	push	114					; 00000072H
	mov	WORD PTR _k32$[ebp+eax*2], cx
	inc	DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _i$[ebp]
	pop	ecx
	push	110					; 0000006eH
	mov	WORD PTR _k32$[ebp+eax*2], dx
	inc	DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _i$[ebp]
	mov	WORD PTR _k32$[ebp+eax*2], cx
	inc	DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _i$[ebp]
	pop	ecx
	push	108					; 0000006cH
	mov	WORD PTR _k32$[ebp+eax*2], cx
	inc	DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _i$[ebp]
	pop	ecx
	push	51					; 00000033H
	mov	WORD PTR _k32$[ebp+eax*2], dx
	inc	DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _i$[ebp]
	mov	WORD PTR _k32$[ebp+eax*2], cx
	inc	DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _i$[ebp]
	pop	ecx
	push	50					; 00000032H
	mov	WORD PTR _k32$[ebp+eax*2], cx
	inc	DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _i$[ebp]
	pop	ecx
	push	46					; 0000002eH
	pop	ebx
	mov	WORD PTR _k32$[ebp+eax*2], cx
	inc	DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _i$[ebp]
; Line 27
	push	100					; 00000064H
	pop	edx
	push	108					; 0000006cH
	mov	WORD PTR _k32$[ebp+eax*2], bx
	inc	DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _i$[ebp]
	pop	ecx
	mov	WORD PTR _k32$[ebp+eax*2], dx
	inc	DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _i$[ebp]
	mov	WORD PTR _k32$[ebp+eax*2], cx
	inc	DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _i$[ebp]
	mov	WORD PTR _k32$[ebp+eax*2], cx
	xor	ecx, ecx
	inc	DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _i$[ebp]
	mov	WORD PTR _k32$[ebp+eax*2], cx
	inc	DWORD PTR _i$[ebp]
; Line 28
	mov	DWORD PTR _i$[ebp], esi
; Line 29
	mov	eax, DWORD PTR _i$[ebp]
	mov	BYTE PTR _u32$[ebp+eax], 117		; 00000075H
	inc	DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _i$[ebp]
	mov	BYTE PTR _u32$[ebp+eax], 115		; 00000073H
	inc	DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _i$[ebp]
	mov	BYTE PTR _u32$[ebp+eax], 101		; 00000065H
	inc	DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _i$[ebp]
	mov	BYTE PTR _u32$[ebp+eax], 114		; 00000072H
	inc	DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _i$[ebp]
	mov	BYTE PTR _u32$[ebp+eax], 51		; 00000033H
	inc	DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _i$[ebp]
; Line 30
	push	108					; 0000006cH
	pop	ecx
	mov	BYTE PTR _u32$[ebp+eax], 50		; 00000032H
	inc	DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _i$[ebp]
	mov	BYTE PTR _u32$[ebp+eax], bl
	xor	ebx, ebx
	inc	DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _i$[ebp]
	mov	BYTE PTR _u32$[ebp+eax], dl
	inc	DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _i$[ebp]
	mov	BYTE PTR _u32$[ebp+eax], cl
	inc	DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _i$[ebp]
	mov	BYTE PTR _u32$[ebp+eax], cl
	inc	DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _i$[ebp]
	mov	BYTE PTR _u32$[ebp+eax], bl
	inc	DWORD PTR _i$[ebp]
; Line 31
	mov	DWORD PTR _i$[ebp], ebx
; Line 32
	mov	eax, DWORD PTR _i$[ebp]
	mov	BYTE PTR _msg$[ebp+eax], 116		; 00000074H
	inc	DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _i$[ebp]
	mov	BYTE PTR _msg$[ebp+eax], 101		; 00000065H
	inc	DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _i$[ebp]
	mov	BYTE PTR _msg$[ebp+eax], 115		; 00000073H
	inc	DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _i$[ebp]
	mov	BYTE PTR _msg$[ebp+eax], 116		; 00000074H
	inc	DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _i$[ebp]
	mov	BYTE PTR _msg$[ebp+eax], bl
	inc	DWORD PTR _i$[ebp]
; File C:\Users\admin\Documents\GitHub\ShellcodeLab\Shellcode\shcutils.h
; Line 133
	mov	eax, DWORD PTR fs:48
; Line 139
	mov	eax, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [eax+12]
	mov	DWORD PTR _curr_module$1$[ebp], edx
; Line 141
	test	edx, edx
	je	$LN78@shellcode
	mov	DWORD PTR tv1252[ebp], 25		; 00000019H
$LL7@shellcode:
	cmp	DWORD PTR [edx+24], ebx
	je	$LN78@shellcode
; Line 142
	mov	edi, DWORD PTR [edx+48]
	test	edi, edi
	je	SHORT $LN58@shellcode
; Line 146
	cmp	WORD PTR _k32$[ebp], 0
	mov	esi, ebx
	je	SHORT $LN80@shellcode
	xor	edx, edx
	mov	ecx, edx
$LL11@shellcode:
	movzx	ebx, WORD PTR [ecx+edi]
	test	bx, bx
	je	SHORT $LN81@shellcode
; Line 148
	movzx	eax, WORD PTR _k32$[ebp+ecx]
	add	eax, -65				; ffffffbfH
	cmp	ax, WORD PTR tv1252[ebp]
	movzx	eax, WORD PTR _k32$[ebp+ecx]
	ja	SHORT $LN16@shellcode
	add	eax, 32					; 00000020H
	mov	WORD PTR _k32$[ebp+ecx], ax
	movzx	eax, ax
$LN16@shellcode:
; Line 149
	mov	DWORD PTR _c1$1$[ebp], eax
	lea	eax, DWORD PTR [ebx-65]
	cmp	ax, WORD PTR tv1252[ebp]
	ja	SHORT $LN18@shellcode
	lea	eax, DWORD PTR [ebx+32]
	mov	WORD PTR [ecx+edi], ax
	movzx	eax, ax
	jmp	SHORT $LN19@shellcode
$LN18@shellcode:
	mov	eax, ebx
$LN19@shellcode:
; Line 150
	cmp	WORD PTR _c1$1$[ebp], ax
	jne	SHORT $LN81@shellcode
; Line 146
	inc	esi
	lea	ecx, DWORD PTR [esi+esi]
	cmp	WORD PTR _k32$[ebp+ecx], dx
	jne	SHORT $LL11@shellcode
$LN81@shellcode:
	mov	edx, DWORD PTR _curr_module$1$[ebp]
	xor	ebx, ebx
$LN80@shellcode:
; Line 152
	cmp	WORD PTR _k32$[ebp+esi*2], bx
	jne	SHORT $LN14@shellcode
	cmp	WORD PTR [edi+esi*2], bx
	je	SHORT $LN54@shellcode
$LN14@shellcode:
; Line 154
	mov	edx, DWORD PTR [edx]
	mov	DWORD PTR _curr_module$1$[ebp], edx
$LN58@shellcode:
; Line 141
	test	edx, edx
	jne	$LL7@shellcode
$LN78@shellcode:
; File C:\Users\admin\Documents\GitHub\ShellcodeLab\Shellcode\shellcode.cpp
; Line 60
	xor	eax, eax
	inc	eax
$LN1@shellcode:
; Line 61
	pop	edi
	pop	esi
	pop	ebx
	leave
	ret	0
$LN54@shellcode:
; File C:\Users\admin\Documents\GitHub\ShellcodeLab\Shellcode\shcutils.h
; Line 153
	mov	ecx, DWORD PTR [edx+24]
	mov	DWORD PTR _base$1$[ebp], ecx
; File C:\Users\admin\Documents\GitHub\ShellcodeLab\Shellcode\shellcode.cpp
; Line 41
	test	ecx, ecx
	je	SHORT $LN78@shellcode
; File C:\Users\admin\Documents\GitHub\ShellcodeLab\Shellcode\shcutils.h
; Line 161
	mov	eax, 23117				; 00005a4dH
	cmp	WORD PTR [ecx], ax
	jne	SHORT $LN78@shellcode
; Line 165
	mov	eax, DWORD PTR [ecx+60]
	mov	eax, DWORD PTR [eax+ecx+120]
	test	eax, eax
	je	SHORT $LN78@shellcode
; Line 170
	mov	edx, ebx
	mov	ebx, DWORD PTR [eax+ecx+24]
	mov	DWORD PTR _i$1$[ebp], edx
	mov	DWORD PTR $T1[ebp], ebx
	test	ebx, ebx
	je	SHORT $LN78@shellcode
; Line 172
	mov	edi, DWORD PTR [eax+ecx+32]
	mov	ebx, DWORD PTR [eax+ecx+36]
	add	edi, ecx
; Line 173
	mov	esi, DWORD PTR [eax+ecx+28]
	add	ebx, ecx
	mov	DWORD PTR tv1233[ebp], esi
	mov	DWORD PTR tv1224[ebp], edi
	mov	DWORD PTR tv1223[ebp], ebx
$LL23@shellcode:
	movzx	eax, WORD PTR [ebx]
; Line 55
	mov	DWORD PTR _a$1$[ebp], 1
; Line 173
	lea	eax, DWORD PTR [esi+eax*4]
; Line 55
	xor	esi, esi
; Line 173
	add	eax, ecx
	mov	DWORD PTR _funcRVA$1$[ebp], eax
; Line 174
	mov	eax, DWORD PTR [edi]
	add	eax, ecx
	mov	DWORD PTR _curr_name$1$[ebp], eax
; Line 56
	mov	al, BYTE PTR [eax]
	test	al, al
	je	SHORT $LN76@shellcode
	mov	ecx, DWORD PTR _curr_name$1$[ebp]
; Line 172
	mov	edi, 65521				; 0000fff1H
	mov	ebx, DWORD PTR _a$1$[ebp]
$LL31@shellcode:
; Line 57
	movsx	eax, al
	add	eax, ebx
	cdq
	idiv	edi
	mov	ebx, edx
; Line 58
	lea	eax, DWORD PTR [esi+ebx]
	cdq
	idiv	edi
	inc	ecx
	mov	esi, edx
	mov	al, BYTE PTR [ecx]
	test	al, al
	jne	SHORT $LL31@shellcode
	mov	ecx, DWORD PTR _base$1$[ebp]
	mov	edi, DWORD PTR tv1224[ebp]
	mov	DWORD PTR _a$1$[ebp], ebx
	mov	ebx, DWORD PTR tv1223[ebp]
; Line 60
	shl	esi, 16					; 00000010H
	or	esi, DWORD PTR _a$1$[ebp]
; Line 176
	cmp	esi, 494994583				; 1d810497H
	je	SHORT $LN55@shellcode
	mov	edx, DWORD PTR _i$1$[ebp]
$LN76@shellcode:
; Line 170
	inc	edx
	add	ebx, 2
	add	edi, 4
	mov	DWORD PTR _i$1$[ebp], edx
	mov	DWORD PTR tv1223[ebp], ebx
	mov	DWORD PTR tv1224[ebp], edi
	cmp	edx, DWORD PTR $T1[ebp]
	jae	$LN78@shellcode
	mov	esi, DWORD PTR tv1233[ebp]
	jmp	SHORT $LL23@shellcode
$LN55@shellcode:
; Line 176
	mov	eax, DWORD PTR _funcRVA$1$[ebp]
	mov	eax, DWORD PTR [eax]
	add	eax, ecx
; File C:\Users\admin\Documents\GitHub\ShellcodeLab\Shellcode\shellcode.cpp
; Line 43
	je	$LN78@shellcode
; Line 44
	lea	ecx, DWORD PTR _u32$[ebp]
	push	ecx
	call	eax
	pop	ecx
	mov	ecx, eax
	mov	DWORD PTR _handle$1$[ebp], ecx
; Line 45
	test	ecx, ecx
	je	$LN78@shellcode
; File C:\Users\admin\Documents\GitHub\ShellcodeLab\Shellcode\shcutils.h
; Line 161
	mov	eax, 23117				; 00005a4dH
	cmp	WORD PTR [ecx], ax
	jne	$LN79@shellcode
; Line 165
	mov	eax, DWORD PTR [ecx+60]
	mov	eax, DWORD PTR [eax+ecx+120]
	test	eax, eax
	je	$LN79@shellcode
; Line 170
	mov	ebx, DWORD PTR [eax+ecx+24]
	xor	edx, edx
	mov	DWORD PTR _i$1$[ebp], edx
	mov	DWORD PTR $T2[ebp], ebx
	test	ebx, ebx
	je	$LN79@shellcode
; Line 172
	mov	edi, DWORD PTR [eax+ecx+32]
	mov	ebx, DWORD PTR [eax+ecx+36]
	add	edi, ecx
; Line 173
	mov	esi, DWORD PTR [eax+ecx+28]
	add	ebx, ecx
	mov	DWORD PTR tv1231[ebp], esi
	mov	DWORD PTR tv1219[ebp], edi
	mov	DWORD PTR tv1218[ebp], ebx
$LL36@shellcode:
	movzx	eax, WORD PTR [ebx]
; Line 55
	mov	DWORD PTR _a$1$[ebp], 1
; Line 173
	lea	eax, DWORD PTR [esi+eax*4]
; Line 55
	xor	esi, esi
; Line 173
	add	eax, ecx
	mov	DWORD PTR _funcRVA$1$[ebp], eax
; Line 174
	mov	eax, DWORD PTR [edi]
	add	eax, ecx
	mov	DWORD PTR _curr_name$1$[ebp], eax
; Line 56
	mov	al, BYTE PTR [eax]
	test	al, al
	je	SHORT $LN75@shellcode
	mov	ecx, DWORD PTR _curr_name$1$[ebp]
; Line 172
	mov	edi, 65521				; 0000fff1H
	mov	ebx, DWORD PTR _a$1$[ebp]
$LL44@shellcode:
; Line 57
	movsx	eax, al
	add	eax, ebx
	cdq
	idiv	edi
	mov	ebx, edx
; Line 58
	lea	eax, DWORD PTR [esi+ebx]
	cdq
	idiv	edi
	inc	ecx
	mov	esi, edx
	mov	al, BYTE PTR [ecx]
	test	al, al
	jne	SHORT $LL44@shellcode
	mov	ecx, DWORD PTR _handle$1$[ebp]
	mov	edi, DWORD PTR tv1219[ebp]
	mov	DWORD PTR _a$1$[ebp], ebx
	mov	ebx, DWORD PTR tv1218[ebp]
; Line 60
	shl	esi, 16					; 00000010H
	or	esi, DWORD PTR _a$1$[ebp]
; Line 176
	cmp	esi, 427754544				; 197f0430H
	je	SHORT $LN56@shellcode
	mov	edx, DWORD PTR _i$1$[ebp]
$LN75@shellcode:
; Line 170
	inc	edx
	add	ebx, 2
	add	edi, 4
	mov	DWORD PTR _i$1$[ebp], edx
	mov	DWORD PTR tv1218[ebp], ebx
	mov	DWORD PTR tv1219[ebp], edi
	cmp	edx, DWORD PTR $T2[ebp]
	jae	SHORT $LN79@shellcode
	mov	esi, DWORD PTR tv1231[ebp]
	jmp	SHORT $LL36@shellcode
$LN56@shellcode:
; Line 176
	mov	eax, DWORD PTR _funcRVA$1$[ebp]
	mov	eax, DWORD PTR [eax]
	add	eax, ecx
	jmp	SHORT $LN33@shellcode
$LN79@shellcode:
; File C:\Users\admin\Documents\GitHub\ShellcodeLab\Shellcode\shellcode.cpp
; Line 47
	xor	eax, eax
$LN33@shellcode:
	push	0
	lea	ecx, DWORD PTR _msg$[ebp]
	push	ecx
	push	ecx
	push	0
	call	eax
	add	esp, 16					; 00000010H
; Line 48
	xor	eax, eax
	jmp	$LN1@shellcode
?shellcode@@YAHXZ ENDP					; shellcode
shcode	ENDS
; Function compile flags: /Ogsp
;	COMDAT _printf
_TEXT	SEGMENT
__Format$ = 8						; size = 4
_printf	PROC						; COMDAT
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.19041.0\ucrt\stdio.h
; Line 956
	push	ebp
	mov	ebp, esp
; Line 960
	lea	eax, DWORD PTR __Format$[ebp+4]
	push	eax
	push	0
	push	DWORD PTR __Format$[ebp]
	push	1
	call	DWORD PTR __imp____acrt_iob_func
	pop	ecx
	push	eax
	call	__vfprintf_l
	add	esp, 16					; 00000010H
; Line 963
	pop	ebp
	ret	0
_printf	ENDP
_TEXT	ENDS
; Function compile flags: /Ogsp
;	COMDAT _fprintf
_TEXT	SEGMENT
__Stream$ = 8						; size = 4
__Format$ = 12						; size = 4
_fprintf PROC						; COMDAT
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.19041.0\ucrt\stdio.h
; Line 837
	push	ebp
	mov	ebp, esp
; Line 841
	lea	eax, DWORD PTR __Format$[ebp+4]
	push	eax
	push	0
	push	DWORD PTR __Format$[ebp]
	push	DWORD PTR __Stream$[ebp]
	call	__vfprintf_l
	add	esp, 16					; 00000010H
; Line 844
	pop	ebp
	ret	0
_fprintf ENDP
_TEXT	ENDS
; Function compile flags: /Ogsp
;	COMDAT __vfprintf_l
_TEXT	SEGMENT
__Stream$ = 8						; size = 4
__Format$ = 12						; size = 4
__Locale$ = 16						; size = 4
__ArgList$ = 20						; size = 4
__vfprintf_l PROC					; COMDAT
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.19041.0\ucrt\stdio.h
; Line 644
	push	ebp
	mov	ebp, esp
; Line 645
	push	DWORD PTR __ArgList$[ebp]
	push	DWORD PTR __Locale$[ebp]
	push	DWORD PTR __Format$[ebp]
	push	DWORD PTR __Stream$[ebp]
	call	___local_stdio_printf_options
	push	DWORD PTR [eax+4]
	push	DWORD PTR [eax]
	call	DWORD PTR __imp____stdio_common_vfprintf
	add	esp, 24					; 00000018H
; Line 646
	pop	ebp
	ret	0
__vfprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Ogsp
;	COMDAT ___local_stdio_printf_options
_TEXT	SEGMENT
___local_stdio_printf_options PROC			; COMDAT
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.19041.0\ucrt\corecrt_stdio_config.h
; Line 92
	mov	eax, OFFSET ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage
; Line 93
	ret	0
___local_stdio_printf_options ENDP
_TEXT	ENDS
END
