; Listing generated by Microsoft (R) Optimizing Compiler Version 19.29.30154.0 

	TITLE	C:\Users\admin\Documents\GitHub\ShellcodeLab\Shellcode\Release\shellcode.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	___local_stdio_printf_options
PUBLIC	__vfprintf_l
PUBLIC	_fprintf
PUBLIC	_printf
PUBLIC	?shellcode@@YAHXZ				; shellcode
PUBLIC	?shellcode_end@@YAXXZ				; shellcode_end
PUBLIC	_main
PUBLIC	?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage
PUBLIC	??_C@_02GMLFBBN@wb@				; `string'
PUBLIC	??_C@_0O@NFBNADIO@shellcode?4bin@		; `string'
PUBLIC	??_C@_0CC@CNIGJHCH@?$FLe?$FN?5Failed?5to?5open?5shellcode?4bi@ ; `string'
PUBLIC	??_C@_0CK@CNHACEFP@?$FLi?$FN?5Shellcode?5size?3?5?$CFlu?0?5locate@ ; `string'
PUBLIC	??_C@_0EF@MOLEIFGD@?$FLe?$FN?5Failed?5to?5dump?5shellcode?5to@ ; `string'
PUBLIC	??_C@_0CM@JHEGLBMC@?$FLi?$FN?5Shellcode?5saved?5to?5file?5she@ ; `string'
PUBLIC	??_C@_02JDPG@rb@				; `string'
PUBLIC	??_C@_0CN@KKANALMI@?$FLe?$FN?5Failed?5to?5allocate?5memory?5f@ ; `string'
PUBLIC	??_C@_0BO@KJKJAGIL@?$FLe?$FN?5Failed?5to?5read?5shellcode?6@ ; `string'
PUBLIC	??_C@_0CA@FFCIEFBF@?$FLi?$FN?5Loaded?5shellcode?5size?3?5?$CFld?6@ ; `string'
PUBLIC	??_C@_0CI@GCOJCDBI@?$FLe?$FN?5Failed?5to?5change?5memory?5pro@ ; `string'
PUBLIC	??_C@_0M@LDNOBAB@Result?3?5?$CFd?6@		; `string'
PUBLIC	??_C@_0CN@CMKKBCPN@Shellcode?5execution?5completed?5s@ ; `string'
EXTRN	__imp____acrt_iob_func:PROC
EXTRN	__imp__fclose:PROC
EXTRN	__imp__fopen:PROC
EXTRN	__imp__fread:PROC
EXTRN	__imp__fseek:PROC
EXTRN	__imp__ftell:PROC
EXTRN	__imp__fwrite:PROC
EXTRN	__imp____stdio_common_vfprintf:PROC
EXTRN	__imp__malloc:PROC
EXTRN	__imp__VirtualProtect@16:PROC
EXTRN	__imp__VirtualFree@12:PROC
;	COMDAT ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA
_BSS	SEGMENT
?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA DQ 01H DUP (?) ; `__local_stdio_printf_options'::`2'::_OptionsStorage
_BSS	ENDS
;	COMDAT ??_C@_0CN@CMKKBCPN@Shellcode?5execution?5completed?5s@
CONST	SEGMENT
??_C@_0CN@CMKKBCPN@Shellcode?5execution?5completed?5s@ DB 'Shellcode exec'
	DB	'ution completed successfully.', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@LDNOBAB@Result?3?5?$CFd?6@
CONST	SEGMENT
??_C@_0M@LDNOBAB@Result?3?5?$CFd?6@ DB 'Result: %d', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@GCOJCDBI@?$FLe?$FN?5Failed?5to?5change?5memory?5pro@
CONST	SEGMENT
??_C@_0CI@GCOJCDBI@?$FLe?$FN?5Failed?5to?5change?5memory?5pro@ DB '[e] Fa'
	DB	'iled to change memory protection', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@FFCIEFBF@?$FLi?$FN?5Loaded?5shellcode?5size?3?5?$CFld?6@
CONST	SEGMENT
??_C@_0CA@FFCIEFBF@?$FLi?$FN?5Loaded?5shellcode?5size?3?5?$CFld?6@ DB '[i'
	DB	'] Loaded shellcode size: %ld', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@KJKJAGIL@?$FLe?$FN?5Failed?5to?5read?5shellcode?6@
CONST	SEGMENT
??_C@_0BO@KJKJAGIL@?$FLe?$FN?5Failed?5to?5read?5shellcode?6@ DB '[e] Fail'
	DB	'ed to read shellcode', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CN@KKANALMI@?$FLe?$FN?5Failed?5to?5allocate?5memory?5f@
CONST	SEGMENT
??_C@_0CN@KKANALMI@?$FLe?$FN?5Failed?5to?5allocate?5memory?5f@ DB '[e] Fa'
	DB	'iled to allocate memory for shellcode', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_02JDPG@rb@
CONST	SEGMENT
??_C@_02JDPG@rb@ DB 'rb', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CM@JHEGLBMC@?$FLi?$FN?5Shellcode?5saved?5to?5file?5she@
CONST	SEGMENT
??_C@_0CM@JHEGLBMC@?$FLi?$FN?5Shellcode?5saved?5to?5file?5she@ DB '[i] Sh'
	DB	'ellcode saved to file shellcode.bin.', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EF@MOLEIFGD@?$FLe?$FN?5Failed?5to?5dump?5shellcode?5to@
CONST	SEGMENT
??_C@_0EF@MOLEIFGD@?$FLe?$FN?5Failed?5to?5dump?5shellcode?5to@ DB '[e] Fa'
	DB	'iled to dump shellcode to disk. Check your compiler settings.'
	DB	0aH, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0CK@CNHACEFP@?$FLi?$FN?5Shellcode?5size?3?5?$CFlu?0?5locate@
CONST	SEGMENT
??_C@_0CK@CNHACEFP@?$FLi?$FN?5Shellcode?5size?3?5?$CFlu?0?5locate@ DB '[i'
	DB	'] Shellcode size: %lu, located at 0x%p', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@CNIGJHCH@?$FLe?$FN?5Failed?5to?5open?5shellcode?4bi@
CONST	SEGMENT
??_C@_0CC@CNIGJHCH@?$FLe?$FN?5Failed?5to?5open?5shellcode?4bi@ DB '[e] Fa'
	DB	'iled to open shellcode.bin', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@NFBNADIO@shellcode?4bin@
CONST	SEGMENT
??_C@_0O@NFBNADIO@shellcode?4bin@ DB 'shellcode.bin', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_02GMLFBBN@wb@
CONST	SEGMENT
??_C@_02GMLFBBN@wb@ DB 'wb', 00H			; `string'
CONST	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	09H
	DB	012H
	DB	019H
	DB	01eH
	DB	021H
	DB	024H
	DB	029H
	DB	02cH
	DB	02fH
	DB	034H
	DB	037H
	DB	03aH
	DB	03fH
	DB	042H
	DB	045H
	DB	04aH
	DB	04dH
	DB	050H
	DB	055H
	DB	058H
	DB	05bH
	DB	060H
	DB	063H
	DB	066H
	DB	06bH
	DB	06eH
	DB	071H
	DB	076H
	DB	079H
	DB	07cH
	DB	081H
	DB	084H
	DB	087H
	DB	08cH
	DB	08fH
	DB	096H
	DB	099H
	DB	09eH
	DB	0a1H
	DB	0a4H
	DB	0a9H
	DB	0acH
	DB	0afH
	DB	0b4H
	DB	0b7H
	DB	0baH
	DB	0bfH
	DB	0c2H
	DB	0c5H
	DB	0caH
voltbl	ENDS
; Function compile flags: /Ogsp
;	COMDAT _main
_TEXT	SEGMENT
_flOldProtect$ = -8					; size = 4
_fileSize$1$ = -4					; size = 4
_main	PROC						; COMDAT
; File C:\Users\admin\Documents\GitHub\ShellcodeLab\Shellcode\shellcode.cpp
; Line 66
	push	ebp
	mov	ebp, esp
	push	ecx
	push	ecx
	push	ebx
; Line 68
	push	OFFSET ??_C@_02GMLFBBN@wb@
	push	OFFSET ??_C@_0O@NFBNADIO@shellcode?4bin@
	call	DWORD PTR __imp__fopen
	mov	ebx, eax
	pop	ecx
	pop	ecx
; Line 69
	test	ebx, ebx
	jne	SHORT $LN2@main
; Line 70
	push	OFFSET ??_C@_0CC@CNIGJHCH@?$FLe?$FN?5Failed?5to?5open?5shellcode?4bi@
	push	2
	call	DWORD PTR __imp____acrt_iob_func
	pop	ecx
	push	eax
	call	_fprintf
	pop	ecx
; Line 71
	xor	eax, eax
	pop	ecx
	inc	eax
	jmp	$LN1@main
$LN2@main:
	push	esi
	push	edi
; Line 73
	mov	esi, OFFSET ?shellcode@@YAHXZ		; shellcode
	mov	edi, OFFSET ?shellcode_end@@YAXXZ	; shellcode_end
; Line 74
	push	esi
	sub	edi, esi
	push	edi
	push	OFFSET ??_C@_0CK@CNHACEFP@?$FLi?$FN?5Shellcode?5size?3?5?$CFlu?0?5locate@
	call	_printf
; Line 75
	push	ebx
	push	1
	push	edi
	push	esi
	mov	esi, DWORD PTR __imp__fwrite
	call	esi
; Line 77
	push	ebx
	push	1
	push	edi
	push	OFFSET ?shellcode@@YAHXZ		; shellcode
	call	esi
	add	esp, 44					; 0000002cH
	test	eax, eax
	jne	SHORT $LN3@main
; Line 78
	push	OFFSET ??_C@_0EF@MOLEIFGD@?$FLe?$FN?5Failed?5to?5dump?5shellcode?5to@
	push	2
	call	DWORD PTR __imp____acrt_iob_func
	pop	ecx
	push	eax
	call	_fprintf
; Line 79
	push	ebx
	call	DWORD PTR __imp__fclose
; Line 80
	jmp	$LN13@main
$LN3@main:
; Line 82
	push	ebx
	mov	ebx, DWORD PTR __imp__fclose
	call	ebx
; Line 83
	mov	DWORD PTR [esp], OFFSET ??_C@_0CM@JHEGLBMC@?$FLi?$FN?5Shellcode?5saved?5to?5file?5she@
	call	_printf
; Line 85
	mov	DWORD PTR [esp], OFFSET ??_C@_02JDPG@rb@
	push	OFFSET ??_C@_0O@NFBNADIO@shellcode?4bin@
	call	DWORD PTR __imp__fopen
	mov	edi, eax
	pop	ecx
	pop	ecx
; Line 86
	test	edi, edi
	jne	SHORT $LN4@main
; Line 87
	push	OFFSET ??_C@_0CC@CNIGJHCH@?$FLe?$FN?5Failed?5to?5open?5shellcode?4bi@
	push	2
	call	DWORD PTR __imp____acrt_iob_func
	pop	ecx
	push	eax
	call	_fprintf
	pop	ecx
; Line 88
	jmp	$LN12@main
$LN4@main:
; Line 90
	mov	esi, DWORD PTR __imp__fseek
	push	2
	push	0
	push	edi
	call	esi
; Line 91
	push	edi
	call	DWORD PTR __imp__ftell
; Line 92
	push	0
	push	0
	push	edi
	mov	DWORD PTR _fileSize$1$[ebp], eax
	call	esi
; Line 94
	push	DWORD PTR _fileSize$1$[ebp]
	call	DWORD PTR __imp__malloc
	mov	esi, eax
	add	esp, 32					; 00000020H
; Line 96
	test	esi, esi
	jne	SHORT $LN5@main
; Line 97
	push	OFFSET ??_C@_0CN@KKANALMI@?$FLe?$FN?5Failed?5to?5allocate?5memory?5f@
	push	2
	call	DWORD PTR __imp____acrt_iob_func
	pop	ecx
	push	eax
	call	_fprintf
; Line 98
	push	edi
	call	ebx
$LN13@main:
; Line 119
	add	esp, 12					; 0000000cH
	jmp	$LN11@main
$LN5@main:
; Line 101
	push	edi
	push	DWORD PTR _fileSize$1$[ebp]
	push	1
	push	esi
	call	DWORD PTR __imp__fread
	add	esp, 16					; 00000010H
	cmp	eax, DWORD PTR _fileSize$1$[ebp]
	je	SHORT $LN6@main
; Line 102
	push	OFFSET ??_C@_0BO@KJKJAGIL@?$FLe?$FN?5Failed?5to?5read?5shellcode?6@
	push	2
	call	DWORD PTR __imp____acrt_iob_func
	pop	ecx
	push	eax
	call	_fprintf
	pop	ecx
	pop	ecx
; Line 104
	push	32768					; 00008000H
	push	0
	push	esi
	call	DWORD PTR __imp__VirtualFree@12
; Line 108
	push	edi
	call	ebx
$LN12@main:
; Line 119
	pop	ecx
	jmp	SHORT $LN11@main
$LN6@main:
; Line 111
	push	edi
	call	ebx
; Line 112
	mov	ebx, DWORD PTR _fileSize$1$[ebp]
	push	ebx
	push	OFFSET ??_C@_0CA@FFCIEFBF@?$FLi?$FN?5Loaded?5shellcode?5size?3?5?$CFld?6@
	call	_printf
	add	esp, 12					; 0000000cH
; Line 116
	lea	eax, DWORD PTR _flOldProtect$[ebp]
	push	eax
	push	64					; 00000040H
	push	ebx
	push	esi
	call	DWORD PTR __imp__VirtualProtect@16
	test	eax, eax
	jne	SHORT $LN7@main
; Line 117
	push	OFFSET ??_C@_0CI@GCOJCDBI@?$FLe?$FN?5Failed?5to?5change?5memory?5pro@
	push	2
	call	DWORD PTR __imp____acrt_iob_func
	pop	ecx
	push	eax
	call	_fprintf
	pop	ecx
	pop	ecx
; Line 118
	push	32768					; 00008000H
	push	0
	push	esi
	call	DWORD PTR __imp__VirtualFree@12
$LN11@main:
; Line 119
	xor	eax, eax
	inc	eax
	jmp	SHORT $LN9@main
$LN7@main:
; Line 130
	call	esi
	push	eax
	push	OFFSET ??_C@_0M@LDNOBAB@Result?3?5?$CFd?6@
	call	_printf
; Line 132
	push	OFFSET ??_C@_0CN@CMKKBCPN@Shellcode?5execution?5completed?5s@
	call	_printf
	add	esp, 12					; 0000000cH
; Line 134
	xor	eax, eax
$LN9@main:
	pop	edi
	pop	esi
$LN1@main:
	pop	ebx
; Line 135
	leave
	ret	0
_main	ENDP
_TEXT	ENDS
; Function compile flags: /Ogsp
;	COMDAT ?shellcode_end@@YAXXZ
shcode	SEGMENT
?shellcode_end@@YAXXZ PROC				; shellcode_end, COMDAT
; File C:\Users\admin\Documents\GitHub\ShellcodeLab\Shellcode\shellcode.cpp
; Line 62
	ret	0
?shellcode_end@@YAXXZ ENDP				; shellcode_end
shcode	ENDS
; Function compile flags: /Ogsp
;	COMDAT ?shellcode@@YAHXZ
shcode	SEGMENT
_temp$1 = -228						; size = 128
_msg$ = -100						; size = 30
_u32$ = -68						; size = 30
_curr_name$1$ = -36					; size = 4
_funcRVA$1$ = -36					; size = 4
tv1192 = -32						; size = 4
_handle$1$ = -32					; size = 4
$T2 = -28						; size = 4
$T3 = -28						; size = 4
tv1190 = -24						; size = 4
_base$1$ = -24						; size = 4
_funcRVA$1$ = -20					; size = 4
_curr_name$1$ = -20					; size = 4
tv1178 = -16						; size = 4
_i$1$ = -16						; size = 4
_i$1$ = -12						; size = 4
tv1203 = -12						; size = 4
tv1183 = -12						; size = 4
$T4 = -8						; size = 4
tv1182 = -8						; size = 4
tv1176 = -8						; size = 4
_a$1$ = -4						; size = 4
_a$1$ = -4						; size = 4
_curr_module$1$ = -4					; size = 4
_i$ = -4						; size = 4
?shellcode@@YAHXZ PROC					; shellcode, COMDAT
; File C:\Users\admin\Documents\GitHub\ShellcodeLab\Shellcode\shellcode.cpp
; Line 19
	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
; Line 26
	mov	DWORD PTR _i$[ebp], 0
; Line 27
	xor	ecx, ecx
	mov	eax, DWORD PTR _i$[ebp]
	inc	ecx
	push	ebx
	push	esi
	push	edi
	mov	BYTE PTR _u32$[ebp+eax], 117		; 00000075H
	add	DWORD PTR _i$[ebp], ecx
	mov	eax, DWORD PTR _i$[ebp]
	mov	BYTE PTR _u32$[ebp+eax], 115		; 00000073H
	add	DWORD PTR _i$[ebp], ecx
	mov	eax, DWORD PTR _i$[ebp]
	mov	BYTE PTR _u32$[ebp+eax], 101		; 00000065H
	add	DWORD PTR _i$[ebp], ecx
	mov	eax, DWORD PTR _i$[ebp]
	mov	BYTE PTR _u32$[ebp+eax], 114		; 00000072H
	add	DWORD PTR _i$[ebp], ecx
	mov	eax, DWORD PTR _i$[ebp]
	mov	BYTE PTR _u32$[ebp+eax], 51		; 00000033H
	add	DWORD PTR _i$[ebp], ecx
	mov	eax, DWORD PTR _i$[ebp]
	mov	BYTE PTR _u32$[ebp+eax], 50		; 00000032H
	add	DWORD PTR _i$[ebp], ecx
; Line 28
	mov	eax, DWORD PTR _i$[ebp]
	mov	BYTE PTR _u32$[ebp+eax], 46		; 0000002eH
	add	DWORD PTR _i$[ebp], ecx
	mov	eax, DWORD PTR _i$[ebp]
	mov	BYTE PTR _u32$[ebp+eax], 100		; 00000064H
	add	DWORD PTR _i$[ebp], ecx
	mov	eax, DWORD PTR _i$[ebp]
	mov	BYTE PTR _u32$[ebp+eax], 108		; 0000006cH
	add	DWORD PTR _i$[ebp], ecx
	mov	eax, DWORD PTR _i$[ebp]
	mov	BYTE PTR _u32$[ebp+eax], 108		; 0000006cH
	add	DWORD PTR _i$[ebp], ecx
	mov	eax, DWORD PTR _i$[ebp]
	mov	BYTE PTR _u32$[ebp+eax], 0
	add	DWORD PTR _i$[ebp], ecx
; Line 29
	mov	DWORD PTR _i$[ebp], 0
; Line 30
	mov	eax, DWORD PTR _i$[ebp]
	mov	BYTE PTR _msg$[ebp+eax], 116		; 00000074H
	add	DWORD PTR _i$[ebp], ecx
	mov	eax, DWORD PTR _i$[ebp]
	mov	BYTE PTR _msg$[ebp+eax], 101		; 00000065H
	add	DWORD PTR _i$[ebp], ecx
	mov	eax, DWORD PTR _i$[ebp]
	mov	BYTE PTR _msg$[ebp+eax], 115		; 00000073H
	add	DWORD PTR _i$[ebp], ecx
	mov	eax, DWORD PTR _i$[ebp]
	mov	BYTE PTR _msg$[ebp+eax], 116		; 00000074H
	add	DWORD PTR _i$[ebp], ecx
	mov	eax, DWORD PTR _i$[ebp]
	mov	BYTE PTR _msg$[ebp+eax], 0
	add	DWORD PTR _i$[ebp], ecx
; File C:\Users\admin\Documents\GitHub\ShellcodeLab\Shellcode\shcutils.h
; Line 135
	mov	eax, DWORD PTR fs:48
; Line 141
	mov	eax, DWORD PTR [eax+12]
	mov	edi, DWORD PTR [eax+12]
	jmp	$LN91@shellcode
$LL7@shellcode:
; Line 143
	cmp	DWORD PTR [edi+24], 0
	je	$LN88@shellcode
; Line 144
	cmp	DWORD PTR [edi+48], 0
	je	$LN90@shellcode
; Line 147
	movzx	eax, WORD PTR [edi+44]
	xor	ebx, ebx
	mov	DWORD PTR $T4[ebp], eax
	test	eax, eax
	je	SHORT $LN10@shellcode
	mov	edi, DWORD PTR [edi+48]
$LL66@shellcode:
; Line 148
	movzx	eax, WORD PTR [edi+ebx*2]
	mov	ecx, eax
	lea	edx, DWORD PTR [eax-65]
	lea	eax, DWORD PTR [ecx+32]
	cmp	dx, 25					; 00000019H
	movzx	esi, ax
	mov	eax, ecx
	cmova	esi, eax
	mov	WORD PTR _temp$1[ebp+ebx*2], si
	inc	ebx
	cmp	ebx, DWORD PTR $T4[ebp]
	jl	SHORT $LL66@shellcode
	mov	edi, DWORD PTR _curr_module$1$[ebp]
	xor	ecx, ecx
	inc	ecx
$LN10@shellcode:
; Line 61
	mov	ax, WORD PTR _temp$1[ebp]
	mov	esi, ecx
	xor	ecx, ecx
	xor	ebx, ebx
	test	ax, ax
	je	SHORT $LN86@shellcode
	movzx	edx, ax
	mov	edi, 65521				; 0000fff1H
$LL20@shellcode:
; Line 62
	movzx	eax, dx
	add	eax, esi
	cdq
	idiv	edi
	mov	esi, edx
; Line 63
	lea	eax, DWORD PTR [ecx+esi]
	cdq
	idiv	edi
	movzx	eax, WORD PTR _temp$1[ebp+ebx*2+2]
	inc	ebx
	mov	ecx, edx
	mov	edx, eax
	test	ax, ax
	jne	SHORT $LL20@shellcode
	mov	edi, DWORD PTR _curr_module$1$[ebp]
; Line 65
	shl	ecx, 16					; 00000010H
	or	ecx, esi
; Line 150
	cmp	ecx, 489227345				; 1d290451H
	je	SHORT $LN56@shellcode
$LN86@shellcode:
; Line 153
	mov	edi, DWORD PTR [edi]
	xor	ecx, ecx
	inc	ecx
$LN91@shellcode:
; Line 143
	mov	DWORD PTR _curr_module$1$[ebp], edi
$LN90@shellcode:
	test	edi, edi
	jne	$LL7@shellcode
$LN88@shellcode:
; File C:\Users\admin\Documents\GitHub\ShellcodeLab\Shellcode\shellcode.cpp
; Line 59
	xor	eax, eax
	inc	eax
$LN1@shellcode:
; Line 60
	pop	edi
	pop	esi
	pop	ebx
	leave
	ret	0
$LN56@shellcode:
; File C:\Users\admin\Documents\GitHub\ShellcodeLab\Shellcode\shcutils.h
; Line 151
	mov	ecx, DWORD PTR [edi+24]
	mov	DWORD PTR _base$1$[ebp], ecx
; File C:\Users\admin\Documents\GitHub\ShellcodeLab\Shellcode\shellcode.cpp
; Line 40
	test	ecx, ecx
	je	SHORT $LN88@shellcode
; File C:\Users\admin\Documents\GitHub\ShellcodeLab\Shellcode\shcutils.h
; Line 160
	mov	eax, 23117				; 00005a4dH
	cmp	WORD PTR [ecx], ax
	jne	SHORT $LN88@shellcode
; Line 164
	mov	eax, DWORD PTR [ecx+60]
	mov	eax, DWORD PTR [eax+ecx+120]
	test	eax, eax
	je	SHORT $LN88@shellcode
; Line 169
	mov	ebx, DWORD PTR [eax+ecx+24]
	xor	edx, edx
	mov	DWORD PTR _i$1$[ebp], edx
	mov	DWORD PTR $T3[ebp], ebx
	test	ebx, ebx
	je	SHORT $LN88@shellcode
; Line 171
	mov	edi, DWORD PTR [eax+ecx+32]
	mov	ebx, DWORD PTR [eax+ecx+36]
	add	edi, ecx
; Line 172
	mov	esi, DWORD PTR [eax+ecx+28]
	add	ebx, ecx
	mov	DWORD PTR tv1192[ebp], esi
	mov	DWORD PTR tv1183[ebp], edi
	mov	DWORD PTR tv1182[ebp], ebx
$LL25@shellcode:
	movzx	eax, WORD PTR [ebx]
; Line 60
	mov	DWORD PTR _a$1$[ebp], 1
; Line 172
	lea	eax, DWORD PTR [esi+eax*4]
; Line 60
	xor	esi, esi
; Line 172
	add	eax, ecx
	mov	DWORD PTR _funcRVA$1$[ebp], eax
; Line 173
	mov	eax, DWORD PTR [edi]
	add	eax, ecx
	mov	DWORD PTR _curr_name$1$[ebp], eax
; Line 61
	mov	al, BYTE PTR [eax]
	test	al, al
	je	SHORT $LN85@shellcode
	mov	ecx, DWORD PTR _curr_name$1$[ebp]
; Line 171
	mov	edi, 65521				; 0000fff1H
	mov	ebx, DWORD PTR _a$1$[ebp]
$LL33@shellcode:
; Line 62
	movsx	eax, al
	add	eax, ebx
	cdq
	idiv	edi
	mov	ebx, edx
; Line 63
	lea	eax, DWORD PTR [esi+ebx]
	cdq
	idiv	edi
	inc	ecx
	mov	esi, edx
	mov	al, BYTE PTR [ecx]
	test	al, al
	jne	SHORT $LL33@shellcode
	mov	ecx, DWORD PTR _base$1$[ebp]
	mov	edi, DWORD PTR tv1183[ebp]
	mov	DWORD PTR _a$1$[ebp], ebx
	mov	ebx, DWORD PTR tv1182[ebp]
; Line 65
	shl	esi, 16					; 00000010H
	or	esi, DWORD PTR _a$1$[ebp]
; Line 175
	cmp	esi, 494994583				; 1d810497H
	je	SHORT $LN57@shellcode
	mov	edx, DWORD PTR _i$1$[ebp]
$LN85@shellcode:
; Line 169
	inc	edx
	add	ebx, 2
	add	edi, 4
	mov	DWORD PTR _i$1$[ebp], edx
	mov	DWORD PTR tv1182[ebp], ebx
	mov	DWORD PTR tv1183[ebp], edi
	cmp	edx, DWORD PTR $T3[ebp]
	jae	$LN88@shellcode
	mov	esi, DWORD PTR tv1192[ebp]
	jmp	SHORT $LL25@shellcode
$LN57@shellcode:
; Line 175
	mov	eax, DWORD PTR _funcRVA$1$[ebp]
	mov	eax, DWORD PTR [eax]
	add	eax, ecx
; File C:\Users\admin\Documents\GitHub\ShellcodeLab\Shellcode\shellcode.cpp
; Line 42
	je	$LN88@shellcode
; Line 43
	lea	ecx, DWORD PTR _u32$[ebp]
	push	ecx
	call	eax
	pop	ecx
	mov	ecx, eax
	mov	DWORD PTR _handle$1$[ebp], ecx
; Line 44
	test	ecx, ecx
	je	$LN88@shellcode
; File C:\Users\admin\Documents\GitHub\ShellcodeLab\Shellcode\shcutils.h
; Line 160
	mov	eax, 23117				; 00005a4dH
	cmp	WORD PTR [ecx], ax
	jne	$LN89@shellcode
; Line 164
	mov	eax, DWORD PTR [ecx+60]
	mov	eax, DWORD PTR [eax+ecx+120]
	test	eax, eax
	je	$LN89@shellcode
; Line 169
	mov	ebx, DWORD PTR [eax+ecx+24]
	xor	edx, edx
	mov	DWORD PTR _i$1$[ebp], edx
	mov	DWORD PTR $T2[ebp], ebx
	test	ebx, ebx
	je	$LN89@shellcode
; Line 171
	mov	edi, DWORD PTR [eax+ecx+32]
	mov	ebx, DWORD PTR [eax+ecx+36]
	add	edi, ecx
; Line 172
	mov	esi, DWORD PTR [eax+ecx+28]
	add	ebx, ecx
	mov	DWORD PTR tv1190[ebp], esi
	mov	DWORD PTR tv1178[ebp], edi
	mov	DWORD PTR tv1176[ebp], ebx
$LL38@shellcode:
	movzx	eax, WORD PTR [ebx]
; Line 60
	mov	DWORD PTR _a$1$[ebp], 1
; Line 172
	lea	eax, DWORD PTR [esi+eax*4]
; Line 60
	xor	esi, esi
; Line 172
	add	eax, ecx
	mov	DWORD PTR _funcRVA$1$[ebp], eax
; Line 173
	mov	eax, DWORD PTR [edi]
	add	eax, ecx
	mov	DWORD PTR _curr_name$1$[ebp], eax
; Line 61
	mov	al, BYTE PTR [eax]
	test	al, al
	je	SHORT $LN84@shellcode
	mov	ecx, DWORD PTR _curr_name$1$[ebp]
; Line 171
	mov	edi, 65521				; 0000fff1H
	mov	ebx, DWORD PTR _a$1$[ebp]
$LL46@shellcode:
; Line 62
	movsx	eax, al
	add	eax, ebx
	cdq
	idiv	edi
	mov	ebx, edx
; Line 63
	lea	eax, DWORD PTR [esi+ebx]
	cdq
	idiv	edi
	inc	ecx
	mov	esi, edx
	mov	al, BYTE PTR [ecx]
	test	al, al
	jne	SHORT $LL46@shellcode
	mov	ecx, DWORD PTR _handle$1$[ebp]
	mov	edi, DWORD PTR tv1178[ebp]
	mov	DWORD PTR _a$1$[ebp], ebx
	mov	ebx, DWORD PTR tv1176[ebp]
; Line 65
	shl	esi, 16					; 00000010H
	or	esi, DWORD PTR _a$1$[ebp]
; Line 175
	cmp	esi, 427754544				; 197f0430H
	je	SHORT $LN58@shellcode
	mov	edx, DWORD PTR _i$1$[ebp]
$LN84@shellcode:
; Line 169
	inc	edx
	add	ebx, 2
	add	edi, 4
	mov	DWORD PTR _i$1$[ebp], edx
	mov	DWORD PTR tv1176[ebp], ebx
	mov	DWORD PTR tv1178[ebp], edi
	cmp	edx, DWORD PTR $T2[ebp]
	jae	SHORT $LN89@shellcode
	mov	esi, DWORD PTR tv1190[ebp]
	jmp	SHORT $LL38@shellcode
$LN58@shellcode:
; Line 175
	mov	eax, DWORD PTR _funcRVA$1$[ebp]
	mov	eax, DWORD PTR [eax]
	add	eax, ecx
	jmp	SHORT $LN35@shellcode
$LN89@shellcode:
; File C:\Users\admin\Documents\GitHub\ShellcodeLab\Shellcode\shellcode.cpp
; Line 46
	xor	eax, eax
$LN35@shellcode:
	push	0
	lea	ecx, DWORD PTR _msg$[ebp]
	push	ecx
	push	ecx
	push	0
	call	eax
	add	esp, 16					; 00000010H
; Line 47
	xor	eax, eax
	jmp	$LN1@shellcode
?shellcode@@YAHXZ ENDP					; shellcode
shcode	ENDS
; Function compile flags: /Ogsp
;	COMDAT _printf
_TEXT	SEGMENT
__Format$ = 8						; size = 4
_printf	PROC						; COMDAT
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.19041.0\ucrt\stdio.h
; Line 956
	push	ebp
	mov	ebp, esp
; Line 960
	lea	eax, DWORD PTR __Format$[ebp+4]
	push	eax
	push	0
	push	DWORD PTR __Format$[ebp]
	push	1
	call	DWORD PTR __imp____acrt_iob_func
	pop	ecx
	push	eax
	call	__vfprintf_l
	add	esp, 16					; 00000010H
; Line 963
	pop	ebp
	ret	0
_printf	ENDP
_TEXT	ENDS
; Function compile flags: /Ogsp
;	COMDAT _fprintf
_TEXT	SEGMENT
__Stream$ = 8						; size = 4
__Format$ = 12						; size = 4
_fprintf PROC						; COMDAT
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.19041.0\ucrt\stdio.h
; Line 837
	push	ebp
	mov	ebp, esp
; Line 841
	lea	eax, DWORD PTR __Format$[ebp+4]
	push	eax
	push	0
	push	DWORD PTR __Format$[ebp]
	push	DWORD PTR __Stream$[ebp]
	call	__vfprintf_l
	add	esp, 16					; 00000010H
; Line 844
	pop	ebp
	ret	0
_fprintf ENDP
_TEXT	ENDS
; Function compile flags: /Ogsp
;	COMDAT __vfprintf_l
_TEXT	SEGMENT
__Stream$ = 8						; size = 4
__Format$ = 12						; size = 4
__Locale$ = 16						; size = 4
__ArgList$ = 20						; size = 4
__vfprintf_l PROC					; COMDAT
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.19041.0\ucrt\stdio.h
; Line 644
	push	ebp
	mov	ebp, esp
; Line 645
	push	DWORD PTR __ArgList$[ebp]
	push	DWORD PTR __Locale$[ebp]
	push	DWORD PTR __Format$[ebp]
	push	DWORD PTR __Stream$[ebp]
	call	___local_stdio_printf_options
	push	DWORD PTR [eax+4]
	push	DWORD PTR [eax]
	call	DWORD PTR __imp____stdio_common_vfprintf
	add	esp, 24					; 00000018H
; Line 646
	pop	ebp
	ret	0
__vfprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Ogsp
;	COMDAT ___local_stdio_printf_options
_TEXT	SEGMENT
___local_stdio_printf_options PROC			; COMDAT
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.19041.0\ucrt\corecrt_stdio_config.h
; Line 92
	mov	eax, OFFSET ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage
; Line 93
	ret	0
___local_stdio_printf_options ENDP
_TEXT	ENDS
END
